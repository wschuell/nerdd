apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-main-config
  labels:
    app: nerdd-frontend
data:
  nginx.conf: |
    # Rate limiting: limit the number of requests per second to 1. If a user sends more than 1
    # request per second, the server will respond with a 503 error. The burst parameter allows
    # the user to send up to 20 requests in a row. This is useful for example when the user
    # refreshes the page and the browser sends multiple requests at once.
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    server {
        listen 80;
        listen [::]:80;

        root /usr/share/nginx/html;

        index index.html;

        # Hide the Nginx version number in http responses. The server responds with "nginx" instead
        # of "nginx/1.27.6". This is a security measure to prevent attackers from knowing which 
        # vulnerabilities the server might have.
        server_tokens off;

        # Set the maximum size of an upload file (or a request in general) to 100MB.
        client_max_body_size 100M;

        # Indicate that the website doesn't use any browser features. At the moment, there is no
        # wildcard to disable all features at once
        # (https://github.com/w3c/webappsec-permissions-policy/issues/483). Therefore, we have to
        # disable each feature individually.
        add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()";

        # HSTS: ensures that browsers always connect over HTTPS. This prevents downgrade attacks.
        # Note: 365 days = 365 * 24 * 60 * 60 seconds = 31536000 seconds.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Do not allow the website to be embedded in an iframe (except same origin). This prevents 
        # clickjacking attacks.
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Cross-site scripting (XSS) protection. This header tells the browser to block the page
        # when it detects a reflected XSS attack.
        add_header X-Xss-Protection "1; mode=block" always;

        # Content Security Policy (CSP) header. This header tells the browser which resources are
        # allowed to be loaded on the website. 
        # * "self": never load resources from other websites
        # * "unsafe-inline": allow inline styles and scripts
        # * "unsafe-eval": allow eval() calls, because some libraries need that
        # * "img-src 'self' data:": allow data URIs in images (we use base64 images all the time)
        # * "style-src 'self' 'unsafe-inline'"": allow inline styles
        # * "always": add the header to all responses
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;

        # MIME sniffing protection. This header tells the browser to not try to guess the MIME type
        # of a file. This prevents MIME sniffing attacks.
        add_header X-Content-Type-Options "nosniff" always;

        # When a user clicks on an external link on the NERDD website, the Referrer-Policy header 
        # determines which information is sent to the external website. This way the destination 
        # website can learn about the incoming traffic source. We use the value
        # "strict-origin-when-cross-origin" that does the following:
        # * If destination is on same origin, allows the full url (testpi1.local/page) to be 
        #   sent.
        # * If destination is on a different origin, only the domain (testpi1.local) is sent.
        # * Does not allow any information to be sent when a scheme downgrade (https -> http) 
        #   happens (prevents an attacker to read the referrer field in the insecure http request).
        # 
        # Examples:
        # | Origin                               | Destination                           | Referrer field
        # | ------------------------------------ | ------------------------------------- | ------------------------------------
        # | https://testpi1.local/some_page | https://testpi1.local/other_page | https://testpi1.local/some_page
        # | https://testpi1.local           | https://example.com                   | https://testpi1.local
        # | https://testpi1.local           | http://example.com                    | (nothing)
        # | https://testpi1.local           | http://testpi1.local             | (nothing)
        #
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        location / {
            # for each request on url $uri:
            # * first, try to get the file $uri/ (e.g. static images)
            # * second, route request to index.html (react router will render the correct page)
            try_files $uri $uri/ /index.html;
            
            # rate limiting: 
            # * use rate limiting zone specified at the start of this file
            # * allow bursts of 20 requests
            limit_req zone=one burst=20;

            # not vital, but improves performance:
            expires max;
            gzip_static on;
            gzip on;
            gzip_proxied any;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        }

        error_page 404 /index.html;
    }
